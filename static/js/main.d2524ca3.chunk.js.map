{"version":3,"sources":["RepoPagination.js","RepoDetails.js","App.js","index.js"],"names":["Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","className","map","number","key","onClick","href","RepoDetails","repos","isLoading","Card","Body","repo","id","html_url","target","name","description","App","useState","inputValue","setInputValue","setRepos","setIsLoading","error","setError","currentPage","setCurrentPage","useEffect","fetch","then","response","json","data","console","log","items","catch","err","indexOfLastPost","indexOfFirstPost","currentPosts","slice","pageNumber","Container","classname","onSubmit","evt","preventDefault","elements","query","value","type","placeholder","RepoPagination","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAwBeA,EAtBI,SAAC,GAGlB,IAH8D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACxCC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACzDD,EAAYI,KAAKH,GAGnB,OACE,6BACE,wBAAII,UAAU,cACXL,EAAYM,KAAI,SAAAC,GAAM,OACrB,wBAAIC,IAAKD,EAAQF,UAAU,aACzB,uBAAGI,QAAS,kBAAMV,EAASQ,IAASG,KAAK,KAAKL,UAAU,aACrDE,U,QCmBAI,EA9BK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC5B,OAAIA,EACK,0CAIP,6BACIA,GAAa,2CACf,wBAAIR,UAAU,aACJ,kBAACS,EAAA,EAAD,CAAMT,UAAU,QACd,kBAACS,EAAA,EAAKC,KAAN,KACE,yBAAKV,UAAU,kCACb,6BACGO,EAAMN,KAAI,SAAAU,GAAI,OACX,wBAAIR,IAAKQ,EAAKC,GAAIZ,UAAU,aAC1B,uBAAGK,KAAMM,EAAKE,SAAUC,OAAO,UAC5BH,EAAKI,MAER,2BAAIJ,EAAKK,wBCsExBC,MAnFf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAEaF,mBAAS,IAFtB,mBAENX,EAFM,KAECc,EAFD,OAGqBH,oBAAS,GAH9B,mBAGNV,EAHM,KAGKc,EAHL,OAIaJ,oBAAS,GAJtB,mBAINK,EAJM,KAICC,EAJD,OAKyBN,mBAAS,GALlC,mBAKNO,EALM,KAKOC,EALP,OAMUR,mBAAS,IAAzB1B,EANM,oBAedmC,qBAAU,WACFR,IAILG,GAAa,GAGbM,MAAM,gDAAkDT,GACrDU,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZV,GAAa,GACbD,EAASW,EAAKG,UAEfC,OAAM,SAAAC,GACLf,GAAa,GACbE,GAAS,GACTS,QAAQV,MAAMc,SAEjB,CAAClB,IAGF,IAAMmB,EAAkBb,EAAcjC,EAChC+C,EAAmBD,EAAkB9C,EACrCgD,EAAejC,EAAMkC,MAAMF,EAAkBD,GAG7C5C,EAAW,SAAAgD,GAAU,OAAIhB,EAAegB,IAEhD,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAW,QACpB,wBAAI5C,UAAU,QAAd,uBACA,0BAAMA,UAAU,OACd6C,SAAU,SAAAC,GACRA,EAAIC,iBACJ3B,EAAc0B,EAAIhC,OAAOkC,SAASC,MAAMC,SAG1C,2BACEC,KAAK,OACLpC,KAAK,QACLf,UAAU,sBACVoD,YAAY,gCAGf7B,GACC,iGAIF,kBAAC8B,EAAD,CACE7D,aAAcA,EACdC,WAAYc,EAAM+C,OAClB5D,SAAUA,IAEZ,kBAAC,EAAD,CAAaa,MAAOiC,EAAchC,UAAWA,IAC7C,kBAAC6C,EAAD,CACE7D,aAAcA,EACdC,WAAYc,EAAM+C,OAClB5D,SAAUA,MCjFlB6D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.d2524ca3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;","  \r\nimport React from 'react';\r\nimport {Card} from 'react-bootstrap'\r\n\r\nconst RepoDetails = ({ repos, isLoading }) => {\r\n  if (isLoading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n       {isLoading && <div>Loading...</div>}\r\n      <ul className=\"repo_list\">\r\n                <Card className=\"mb-1\">\r\n                  <Card.Body>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                      <div>\r\n                        {repos.map(repo => (  \r\n                            <li key={repo.id} className=\"repo_item\">\r\n                              <a href={repo.html_url} target=\"_blank\">\r\n                                {repo.name}\r\n                              </a>\r\n                              <p>{repo.description}</p>\r\n                            </li>\r\n                        ))\r\n                          }\r\n                      </div>\r\n                    </div>\r\n                  </Card.Body>             \r\n                </Card>              \r\n     </ul>\r\n    </div>  \r\n)\r\n}\r\nexport default RepoDetails;\r\n\r\n  ","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport { Container } from 'react-bootstrap';\nimport RepoPagination from './RepoPagination';\nimport RepoDetails from './RepoDetails';\n\n\n// https://api.github.com/search/repositories?q=html\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [repos, setRepos] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  // const [isLoading, setIsLoading] = React.useState(false);\n  // const [error, setError] = React.useState(false);\n  // const [repos, setRepos] = React.useState([]);\n\n  \n  \n\n useEffect(() => {\n    if (!inputValue) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    // make API calls\n    fetch(\"https://api.github.com/search/repositories?q=\" + inputValue)\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n        setIsLoading(false);\n        setRepos(data.items);\n      })\n      .catch(err => {\n        setIsLoading(false);\n        setError(true);\n        console.error(err);\n      });\n  }, [inputValue]);\n\n    // Get current posts\n    const indexOfLastPost = currentPage * postsPerPage;\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\n    const currentPosts = repos.slice(indexOfFirstPost, indexOfLastPost);\n  \n    // Change page\n    const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return (\n    <Container classname =\"my-4\">\n      <h1 className=\"mb-4\">GitHub Search Repos</h1> \n      <form className=\"mb-4\"\n        onSubmit={evt => {\n          evt.preventDefault();\n          setInputValue(evt.target.elements.query.value);\n        }}\n      >\n        <input\n          type=\"text\"\n          name=\"query\"\n          className=\"github_search_input\"\n          placeholder=\"Search Github Repositories\"\n        />\n      </form>\n      {error && (\n        <div>\n          Unexpected Error Occurred fetching data. Please try again later!\n        </div>\n      )}\n      <RepoPagination\n        postsPerPage={postsPerPage}\n        totalPosts={repos.length}\n        paginate={paginate}\n      />\n      <RepoDetails repos={currentPosts} isLoading={isLoading} />\n      <RepoPagination\n        postsPerPage={postsPerPage}\n        totalPosts={repos.length}\n        paginate={paginate}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}